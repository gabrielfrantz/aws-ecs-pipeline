name: Deploy
#on: 
  #workflow_dispatch: #quando ele vai rodar (manual)
on: 
  push: #quando ele vai rodar
    branches:
      - main #branch que ele vai rodar
  workflow_dispatch: #permite executar manualmente

jobs:
  build_push:
    name: Build - Push
    runs-on: ubuntu-latest #vai rodar numa máquina ubuntu próprio do github
    defaults:
      run:
        shell: bash #tipo de shell que vai correr o workflow na máquina
    steps:
    - name: Checkout #precisa dele em todos os steps (é padrão)
      uses: actions/checkout@v3 #padrão do github

    # Configurar credenciais AWS
    - name: Configurar AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Login no ECR
    - name: Login no Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    
    # Construir a imagem Docker
    - name: Build da imagem Docker
      env:
        VERSION: v${{ github.run_number }}
      run: |
        docker build . --file Dockerfile --tag meu-app-frontend:${VERSION}
    
    # Marcar a imagem com a tag do ECR
    - name: Tag da imagem
      env:
        VERSION: v${{ github.run_number }}
      run: |
        docker tag meu-app-frontend:${VERSION} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${VERSION}

    # Envia a imagem para o ECR
    - name: Push da imagem para o ECR
      env:
        VERSION: v${{ github.run_number }}
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${VERSION}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest #vai rodar numa máquina ubuntu próprio do github
    needs: build_push #deixa o job deploy dependente do job build_push
    defaults:
      run:
        shell: bash #tipo de shell que vai correr o workflow na máquina
    steps:
    - name: Checkout #precisa dele em todos os steps (é padrão)
      uses: actions/checkout@v3 #padrão do github

    # Configurar credenciais AWS
    - name: Configurar AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Atualizar a definição da task ECS com a nova imagem
    - name: Registrar nova task definition
      env:
        VERSION: v${{ github.run_number }}
      run: |
        RESPONSE=$(aws ecs register-task-definition \
          --family ${{ secrets.ECS_TASK_DEFINITION }} \
          --execution-role-arn ${{ secrets.ECS_EXECUTION_ROLE_ARN }} \
          --task-role-arn ${{ secrets.ECS_TASK_ROLE_ARN }} \
          --network-mode awsvpc \
          --requires-compatibilities FARGATE \
          --cpu "256" \
          --memory "512" \
          --container-definitions "[{
            \"name\": \"ecs-frontend-container\",
            \"image\": \"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${VERSION}\",
            \"memory\": 512,
            \"cpu\": 256,
            \"essential\": true,
            \"environment\": [
              {\"name\": \"DB_HOST\", \"value\": \"${{ secrets.DB_HOST }}\"},
              {\"name\": \"DB_NAME\", \"value\": \"${{ secrets.DB_NAME }}\"},
              {\"name\": \"DB_USER\", \"value\": \"${{ secrets.DB_USER }}\"},
              {\"name\": \"DB_PASSWORD\", \"value\": \"${{ secrets.DB_PASSWORD }}\"},
              {\"name\": \"DB_PORT\", \"value\": \"${{ secrets.DB_PORT }}\"}
            ],
            \"portMappings\": [
              {\"containerPort\": 5000, \"hostPort\": 5000, \"protocol\": \"tcp\"}
            ]
          }]")        
          
        # Extrair o taskDefinitionArn da resposta
        TASK_DEFINITION_ARN=$(echo $RESPONSE | jq -r .taskDefinition.taskDefinitionArn)
        echo "Task definition registered: $TASK_DEFINITION_ARN"

        # Verificar se o serviço existe no ECS
        SERVICE_EXISTS=$(aws ecs describe-services \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --services ${{ secrets.ECS_SERVICE_NAME }} \
          --query "services[0].serviceName" \
          --output text)

        if [ "$SERVICE_EXISTS" == "${{ secrets.ECS_SERVICE_NAME }}" ]; then
          # Atualizar o ECS service com a nova task definition
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition $TASK_DEFINITION_ARN \
            --desired-count 1
        else
          echo "Erro: O serviço ECS ${secrets.ECS_SERVICE_NAME} não foi encontrado."
          exit 1
        fi